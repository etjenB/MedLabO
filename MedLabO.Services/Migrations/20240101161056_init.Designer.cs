// <auto-generated />
using System;
using MedLabO.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedLabO.Services.Migrations
{
    [DbContext(typeof(MedLabOContext))]
    [Migration("20240101161056_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MedLabO.Services.Database.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");
                });

            modelBuilder.Entity("MedLabO.Services.Database.Novost", b =>
                {
                    b.Property<Guid>("NovostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdministratorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DTKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DTZadnjeModifikacije")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("NovostID");

                    b.HasIndex("AdministratorID");

                    b.ToTable("Novosti");

                    b.HasData(
                        new
                        {
                            NovostID = new Guid("fc31fac7-27e4-41bd-95f4-da76a956bd23"),
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(8462),
                            Naslov = "Novi Testovi Dostupni u Našem Laboratoriju",
                            Sadrzaj = "Dragi pacijenti, s ponosom vas obavještavamo da smo proširili našu ponudu testova. Novi testovi uključuju napredne genetske analize, testove intolerancije na hranu, i detaljne hormonalne profile. Ovi testovi su dizajnirani da vam pruže dublji uvid u vaše zdravstveno stanje i omoguće personalizirani pristup liječenju. Naš tim stručnjaka je na raspolaganju da odgovori na sva vaša pitanja i pomogne vam odabrati najprikladnije testove za vaše potrebe. Posjetite nas i saznajte više o novim mogućnostima koje vam nudimo za očuvanje i unapređenje vašeg zdravlja.",
                            Slika = new byte[0]
                        },
                        new
                        {
                            NovostID = new Guid("be49f5ad-6d18-435e-97a5-13600af6b4e5"),
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(8486),
                            Naslov = "Dan Otvorenih Vrata u Laboratoriju",
                            Sadrzaj = "Pozivamo vas na Dan otvorenih vrata koji će se održati 15.04.2023. u našem laboratoriju. Ovo je izvrsna prilika da se upoznate s našim radom, tehnologijama koje koristimo i timom stručnjaka koji brinu o vašem zdravlju. Tijekom ovog dana, moći ćete besplatno izvršiti osnovne zdravstvene preglede, sudjelovati u edukativnim radionicama i dobiti individualne savjete o zdravlju. Također, pripremili smo posebne popuste na odabrane testove i usluge. Ne propustite ovu priliku da saznate više o važnosti preventivnih pregleda i kako možete aktivno doprinijeti očuvanju svog zdravlja.",
                            Slika = new byte[0]
                        },
                        new
                        {
                            NovostID = new Guid("465a1478-3027-498f-aa82-b46b9a0ec4ee"),
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(8504),
                            Naslov = "Obavijest o Radnom Vremenu za Praznike",
                            Sadrzaj = "Obavještavamo naše cijenjene pacijente da će tijekom nadolazećih praznika doći do promjena u radnom vremenu našeg laboratorija. Na Badnjak i Staru godinu laboratorij će raditi skraćeno, do 12:00 sati, dok će na Božić i Novu godinu laboratorij biti zatvoren. Molimo vas da planirate svoje posjete i testiranja sukladno ovom rasporedu. Također, želimo iskoristiti ovu priliku da vam zaželimo sretne i mirne praznike. Neka ovo vrijeme bude ispunjeno zdravljem, srećom i radosti. U novoj godini nastavljamo s našom misijom pružanja vrhunske zdravstvene skrbi i usluga. Hvala vam što ste dio naše zajednice i što nam vjerujete brigu o vašem zdravlju.",
                            Slika = new byte[0]
                        },
                        new
                        {
                            NovostID = new Guid("325d2b08-9822-4ef1-acbd-2d4528bbeebc"),
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(8534),
                            Naslov = "Uvođenje Online Rezervacija Termina",
                            Sadrzaj = "S ciljem poboljšanja naših usluga i olakšavanja pristupa zdravstvenoj skrbi, uvodimo novi sustav online rezervacija termina putem naše web stranice. Od sada, možete jednostavno i brzo rezervirati svoj termin za testiranje također putem naše web stranice. Ovaj sustav omogućava vam da izaberete datum i vrijeme koje vam najviše odgovara, bez potrebe za čekanjem u redu ili telefonskim pozivima. Također, putem sustava možete pratiti svoje rezervacije, dobiti podsjetnike za nadolazeće termine i pristupiti rezultatima testiranja. Naš cilj je učiniti proces testiranja što jednostavnijim i ugodnijim za vas, te vam pružiti brz i efikasan pristup informacijama o vašem zdravlju. Pozivamo vas da isprobate naš novi sustav rezervacija i podijelite s nama svoje dojmove.",
                            Slika = new byte[0]
                        },
                        new
                        {
                            NovostID = new Guid("7fa51a3e-501c-4466-90e2-1eba0a549d23"),
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(8553),
                            Naslov = "Modernizacija Laboratorijske Opreme",
                            Sadrzaj = "S ponosom vas obavještavamo o nedavnoj modernizaciji naše laboratorijske opreme. Ulaganjem u najnovije tehnologije, osigurali smo da naši pacijenti imaju pristup najpreciznijim i najbržim dijagnostičkim testovima. Nova oprema omogućava nam da proširimo spektar testova, smanjimo vrijeme čekanja na rezultate i povećamo tačnost dijagnostike. Ovo je važan korak u našem nastojanju da pružimo vrhunsku medicinsku skrb i podršku našim pacijentima. Vjerujemo da će ove promjene značajno doprinijeti kvaliteti i efikasnosti naših usluga, te vam omogućiti bolje upravljanje vašim zdravljem. Zahvaljujemo vam na povjerenju i radujemo se što ćemo vam pružiti još bolju uslugu uz pomoć ove napredne tehnologije.",
                            Slika = new byte[0]
                        });
                });

            modelBuilder.Entity("MedLabO.Services.Database.Obavijest", b =>
                {
                    b.Property<Guid>("ObavijestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdministratorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DTKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DTZadnjeModifikacije")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("ObavijestID");

                    b.HasIndex("AdministratorID");

                    b.ToTable("Obavijesti");

                    b.HasData(
                        new
                        {
                            ObavijestID = new Guid("0e322352-b209-4dce-8369-9d7d67f38daf"),
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(8359),
                            Naslov = "Neradni Dan - 18.02.2023.",
                            Sadrzaj = "Poštovani kolege, obavještavamo vas da će laboratorij biti zatvoren 18.02.2023. zbog redovnog godišnjeg održavanja opreme i prostorija. Ovo je idealna prilika da se posvetite svom zdravlju i porodici, te da napunite baterije za nove radne izazove. Molimo vas da sve planirane aktivnosti prilagodite ovom datumu. Također, podsjećamo vas da je važno redovno pratiti stanje i održavanje opreme, kako bismo osigurali najviši standard naših usluga. Hvala vam na razumijevanju i suradnji.",
                            Slika = new byte[0]
                        },
                        new
                        {
                            ObavijestID = new Guid("55d8e97e-4379-4978-940a-d342158c5ce5"),
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(8381),
                            Naslov = "Edukacijski Seminar za Zaposlenike",
                            Sadrzaj = "Drage kolege, s velikim zadovoljstvom vas obavještavamo da ćemo 25.03.2023. organizirati edukacijski seminar na temu \"Najnovije tehnike u laboratorijskim ispitivanjima\". Seminar će voditi priznati stručnjaci u našem području rada. Ovo je izvrsna prilika za usavršavanje i razmjenu iskustava s kolegama iz struke. Seminar će se održati u konferencijskoj sali našeg laboratorija, s početkom u 10:00 sati. Molimo sve zainteresirane da potvrde svoje sudjelovanje najkasnije do 15.03.2023.",
                            Slika = new byte[0]
                        },
                        new
                        {
                            ObavijestID = new Guid("04cf6396-4405-43b0-87bc-fee864a88e2e"),
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(8400),
                            Naslov = "Promjena Protokola za Obradu Uzoraka",
                            Sadrzaj = "Obavještavamo sve zaposlenike da od 01.04.2023. stupaju na snagu novi protokoli za obradu uzoraka. Novi protokoli uključuju ažurirane postupke za rukovanje, analizu i pohranu uzoraka, s ciljem povećanja efikasnosti i tačnosti naših testova. Detaljne upute i obuke bit će organizirane u narednim sedmicama. Molimo sve zaposlenike da se upoznaju s novim protokolima i prate upute za obuku. Vaša suradnja i pridržavanje novih protokola su ključni za uspjeh ove promjene.",
                            Slika = new byte[0]
                        },
                        new
                        {
                            ObavijestID = new Guid("af32cfec-6818-44f2-9efa-053d24bebd9d"),
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(8419),
                            Naslov = "Godišnji Plan Odmora",
                            Sadrzaj = "Kako bismo osigurali kontinuirani rad laboratorija i zadovoljili potrebe naših pacijenata, molimo sve zaposlenike da do 15.04.2023. dostave svoje planove godišnjih odmora. Važno je da planiramo i koordiniramo odmore kako bismo izbjegli preklapanja i osigurali adekvatno osoblje u svakom trenutku. Molimo vas da razmotrite potrebe vašeg tima i laboratorija prilikom planiranja odmora. U slučaju bilo kakvih pitanja ili nedoumica, slobodno se obratite odjelu ljudskih resursa.",
                            Slika = new byte[0]
                        },
                        new
                        {
                            ObavijestID = new Guid("6cb8671d-2034-4bed-9a8b-1cf5a2f4d917"),
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(8437),
                            Naslov = "Sigurnosne Mjere u Laboratoriju",
                            Sadrzaj = "Sigurnost na radnom mjestu je naš prioritet. Stoga vas podsjećamo na važnost pridržavanja svih sigurnosnih protokola i procedura u laboratoriju. Ovo uključuje pravilno nošenje zaštitne opreme, pažljivo rukovanje uzorcima i hemikalijama, te održavanje čistoće i urednosti radnog prostora. Redovite provjere i obuke o sigurnosti bit će organizirane kako bismo osigurali da su svi upoznati s najboljim praksama i procedurama. Vaša sigurnost i zdravlje su od izuzetne važnosti, stoga vas molimo da ozbiljno shvatite ove mjere.",
                            Slika = new byte[0]
                        });
                });

            modelBuilder.Entity("MedLabO.Services.Database.Racun", b =>
                {
                    b.Property<Guid>("RacunID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cijena")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Placeno")
                        .HasColumnType("bit");

                    b.Property<Guid?>("TerminID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RacunID");

                    b.HasIndex("TerminID");

                    b.ToTable("Racuni");

                    b.HasData(
                        new
                        {
                            RacunID = new Guid("3c19770e-223d-43fe-8d15-3ba1fe7151fe"),
                            Cijena = 10m,
                            Placeno = true
                        },
                        new
                        {
                            RacunID = new Guid("eca7c955-9ce4-42ab-a33a-0f2c08f1e38c"),
                            Cijena = 14m,
                            Placeno = true
                        },
                        new
                        {
                            RacunID = new Guid("0bdc8864-0879-4401-8879-a5be3496cf6d"),
                            Cijena = 9m,
                            Placeno = true
                        },
                        new
                        {
                            RacunID = new Guid("5461ce30-ad9c-49cb-9371-c5fd231fbf63"),
                            Cijena = 11m,
                            Placeno = true
                        },
                        new
                        {
                            RacunID = new Guid("c6781a23-2c71-4dfe-a934-8597c0688812"),
                            Cijena = 36m,
                            Placeno = true
                        },
                        new
                        {
                            RacunID = new Guid("1186f71a-e2d2-4db2-bf14-2b7727859c74"),
                            Cijena = 4m,
                            Placeno = true
                        },
                        new
                        {
                            RacunID = new Guid("903ab20a-1aea-493e-8e3c-05564353bc54"),
                            Cijena = 20m,
                            Placeno = true
                        },
                        new
                        {
                            RacunID = new Guid("2057cdbf-4bd4-4071-a2bc-5e19c0183c40"),
                            Cijena = 10m,
                            Placeno = true
                        },
                        new
                        {
                            RacunID = new Guid("18356cdd-fba4-4d5b-a33c-e1d09894a145"),
                            Cijena = 11m,
                            Placeno = true
                        },
                        new
                        {
                            RacunID = new Guid("58f643cf-1079-4177-950e-a97162657093"),
                            Cijena = 11m,
                            Placeno = true
                        },
                        new
                        {
                            RacunID = new Guid("6b746e04-31ac-46f5-ad2e-33bdea321d63"),
                            Cijena = 10m,
                            Placeno = true
                        },
                        new
                        {
                            RacunID = new Guid("8d166154-fd43-485a-8263-93efdb69ac4c"),
                            Cijena = 11m,
                            Placeno = true
                        },
                        new
                        {
                            RacunID = new Guid("0fb113db-16af-4675-bcbf-c18709429e2a"),
                            Cijena = 21m,
                            Placeno = true
                        },
                        new
                        {
                            RacunID = new Guid("e8f45c95-f42a-4220-841d-1ec3e4998f48"),
                            Cijena = 14m,
                            Placeno = true
                        },
                        new
                        {
                            RacunID = new Guid("b36b8aaf-2c31-47df-88c8-e76d96e41c56"),
                            Cijena = 11m,
                            Placeno = true
                        },
                        new
                        {
                            RacunID = new Guid("b35cef5e-0471-4ff2-99f0-6ecbd1d390f5"),
                            Cijena = 21m,
                            Placeno = true
                        },
                        new
                        {
                            RacunID = new Guid("cc379f98-3f7e-4f69-a7a3-4654b15e9954"),
                            Cijena = 14m,
                            Placeno = true
                        });
                });

            modelBuilder.Entity("MedLabO.Services.Database.Rezultat", b =>
                {
                    b.Property<Guid>("RezultatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DTRezultata")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Obiljezen")
                        .HasColumnType("bit");

                    b.Property<float?>("RazlikaOdNormalne")
                        .HasColumnType("real");

                    b.Property<float?>("RezFlo")
                        .HasColumnType("real");

                    b.Property<string>("RezStr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestZakljucak")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RezultatID");

                    b.ToTable("Rezultati");

                    b.HasData(
                        new
                        {
                            RezultatID = new Guid("d4e7df29-a213-4c94-9c5d-08dc0ac6a180"),
                            DTRezultata = new DateTime(2024, 1, 1, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Obiljezen = true,
                            RazlikaOdNormalne = 7f,
                            RezFlo = 12f,
                            TestZakljucak = "povišen"
                        },
                        new
                        {
                            RezultatID = new Guid("ab949483-d2ec-4f94-9c5e-08dc0ac6a180"),
                            DTRezultata = new DateTime(2024, 1, 1, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Obiljezen = false,
                            RezFlo = 5f,
                            TestZakljucak = "nor"
                        },
                        new
                        {
                            RezultatID = new Guid("d4395013-e4a1-4c9b-9c5f-08dc0ac6a180"),
                            DTRezultata = new DateTime(2024, 1, 1, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Obiljezen = false,
                            RezStr = "Negativno",
                            TestZakljucak = "nor"
                        },
                        new
                        {
                            RezultatID = new Guid("f86ee7f0-c7bb-49e7-9c60-08dc0ac6a180"),
                            DTRezultata = new DateTime(2024, 1, 1, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Obiljezen = false,
                            RezStr = "Negativno",
                            TestZakljucak = "nor"
                        });
                });

            modelBuilder.Entity("MedLabO.Services.Database.Spol", b =>
                {
                    b.Property<int>("SpolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpolID"), 1L, 1);

                    b.Property<string>("Kod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpolID");

                    b.ToTable("Spolovi");

                    b.HasData(
                        new
                        {
                            SpolID = 1,
                            Kod = "M",
                            Naziv = "Muško"
                        },
                        new
                        {
                            SpolID = 2,
                            Kod = "Ž",
                            Naziv = "Žensko"
                        },
                        new
                        {
                            SpolID = 3,
                            Kod = "N",
                            Naziv = "Nepoznato"
                        });
                });

            modelBuilder.Entity("MedLabO.Services.Database.Termin", b =>
                {
                    b.Property<Guid>("TerminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DTTermina")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MedicinskoOsobljeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Napomena")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("Obavljen")
                        .HasColumnType("bit");

                    b.Property<string>("Odgovor")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid?>("PacijentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Placeno")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RacunID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RazlogOtkazivanja")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("RezultatDodan")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RezultatTerminaPDF")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("ZakljucakDodan")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ZakljucakID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("TerminID");

                    b.HasIndex("MedicinskoOsobljeID");

                    b.HasIndex("PacijentID");

                    b.HasIndex("RacunID");

                    b.HasIndex("ZakljucakID");

                    b.ToTable("Termini");

                    b.HasData(
                        new
                        {
                            TerminID = new Guid("26954381-1f85-4776-a5d4-39068d8add3a"),
                            DTTermina = new DateTime(2024, 1, 19, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Obavljen = false,
                            PacijentID = new Guid("140fb21b-43c9-4da2-86e9-8f99d08d8d28"),
                            Placeno = true,
                            RezultatDodan = false,
                            ZakljucakDodan = false,
                            isDeleted = false
                        },
                        new
                        {
                            TerminID = new Guid("595c85f2-f1b1-4176-94a7-411bd46570cc"),
                            DTTermina = new DateTime(2024, 1, 26, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Obavljen = false,
                            PacijentID = new Guid("140fb21b-43c9-4da2-86e9-8f99d08d8d28"),
                            Placeno = true,
                            RezultatDodan = false,
                            ZakljucakDodan = false,
                            isDeleted = false
                        },
                        new
                        {
                            TerminID = new Guid("34c710c6-ec80-483b-aa25-42c0229941ec"),
                            DTTermina = new DateTime(2024, 1, 18, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Obavljen = false,
                            PacijentID = new Guid("140fb21b-43c9-4da2-86e9-8f99d08d8d28"),
                            Placeno = true,
                            RezultatDodan = false,
                            ZakljucakDodan = false,
                            isDeleted = false
                        },
                        new
                        {
                            TerminID = new Guid("7ad39c1e-7d14-4127-bbac-459888f300e6"),
                            DTTermina = new DateTime(2024, 1, 22, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Obavljen = false,
                            PacijentID = new Guid("140fb21b-43c9-4da2-86e9-8f99d08d8d28"),
                            Placeno = true,
                            RezultatDodan = false,
                            ZakljucakDodan = false,
                            isDeleted = false
                        },
                        new
                        {
                            TerminID = new Guid("fcbfe84d-b6fd-4b36-a31d-773eb669c123"),
                            DTTermina = new DateTime(2024, 1, 10, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Obavljen = false,
                            PacijentID = new Guid("140fb21b-43c9-4da2-86e9-8f99d08d8d28"),
                            Placeno = true,
                            RezultatDodan = false,
                            ZakljucakDodan = false,
                            isDeleted = false
                        },
                        new
                        {
                            TerminID = new Guid("4253753f-db13-4d93-b0a8-7d4cf6b46013"),
                            DTTermina = new DateTime(2024, 1, 23, 7, 40, 0, 0, DateTimeKind.Unspecified),
                            Obavljen = false,
                            PacijentID = new Guid("140fb21b-43c9-4da2-86e9-8f99d08d8d28"),
                            Placeno = true,
                            RezultatDodan = false,
                            ZakljucakDodan = false,
                            isDeleted = false
                        },
                        new
                        {
                            TerminID = new Guid("5c5e0879-6019-4b0d-81fb-804b73273d03"),
                            DTTermina = new DateTime(2024, 1, 25, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Obavljen = false,
                            PacijentID = new Guid("140fb21b-43c9-4da2-86e9-8f99d08d8d28"),
                            Placeno = true,
                            RezultatDodan = false,
                            ZakljucakDodan = false,
                            isDeleted = false
                        },
                        new
                        {
                            TerminID = new Guid("66f5142b-dcbc-4330-81a6-8bade0950f44"),
                            DTTermina = new DateTime(2024, 1, 29, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Obavljen = false,
                            PacijentID = new Guid("140fb21b-43c9-4da2-86e9-8f99d08d8d28"),
                            Placeno = true,
                            RezultatDodan = false,
                            ZakljucakDodan = false,
                            isDeleted = false
                        },
                        new
                        {
                            TerminID = new Guid("d2539f37-0e15-44b6-af31-8cc93c03dcd1"),
                            DTTermina = new DateTime(2024, 1, 12, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Obavljen = false,
                            PacijentID = new Guid("140fb21b-43c9-4da2-86e9-8f99d08d8d28"),
                            Placeno = true,
                            RezultatDodan = false,
                            ZakljucakDodan = false,
                            isDeleted = false
                        },
                        new
                        {
                            TerminID = new Guid("1137e44a-6e88-41ab-965f-8ea5a936ff24"),
                            DTTermina = new DateTime(2024, 1, 24, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Obavljen = false,
                            PacijentID = new Guid("140fb21b-43c9-4da2-86e9-8f99d08d8d28"),
                            Placeno = true,
                            RezultatDodan = false,
                            ZakljucakDodan = false,
                            isDeleted = false
                        },
                        new
                        {
                            TerminID = new Guid("7c262d54-d6f6-4461-b4c9-a0e9266f2d50"),
                            DTTermina = new DateTime(2024, 1, 11, 9, 40, 0, 0, DateTimeKind.Unspecified),
                            Obavljen = false,
                            PacijentID = new Guid("140fb21b-43c9-4da2-86e9-8f99d08d8d28"),
                            Placeno = true,
                            RezultatDodan = false,
                            ZakljucakDodan = false,
                            isDeleted = false
                        },
                        new
                        {
                            TerminID = new Guid("dc433820-5129-44a9-bb1e-a3b87c1bc398"),
                            DTTermina = new DateTime(2024, 1, 16, 10, 40, 0, 0, DateTimeKind.Unspecified),
                            Obavljen = false,
                            PacijentID = new Guid("140fb21b-43c9-4da2-86e9-8f99d08d8d28"),
                            Placeno = true,
                            RezultatDodan = false,
                            ZakljucakDodan = false,
                            isDeleted = false
                        },
                        new
                        {
                            TerminID = new Guid("10254f8e-15dd-4673-aa54-b4da76946d1d"),
                            DTTermina = new DateTime(2024, 1, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Obavljen = false,
                            PacijentID = new Guid("140fb21b-43c9-4da2-86e9-8f99d08d8d28"),
                            Placeno = true,
                            RezultatDodan = false,
                            ZakljucakDodan = false,
                            isDeleted = false
                        },
                        new
                        {
                            TerminID = new Guid("fb3bf003-4dda-4228-a1b6-d488644f90a8"),
                            DTTermina = new DateTime(2024, 1, 17, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Obavljen = false,
                            PacijentID = new Guid("140fb21b-43c9-4da2-86e9-8f99d08d8d28"),
                            Placeno = true,
                            RezultatDodan = false,
                            ZakljucakDodan = false,
                            isDeleted = false
                        },
                        new
                        {
                            TerminID = new Guid("42a4749b-7f8c-464d-a54a-e857e45d62a7"),
                            DTTermina = new DateTime(2024, 1, 31, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Obavljen = false,
                            PacijentID = new Guid("140fb21b-43c9-4da2-86e9-8f99d08d8d28"),
                            Placeno = true,
                            RezultatDodan = false,
                            ZakljucakDodan = false,
                            isDeleted = false
                        },
                        new
                        {
                            TerminID = new Guid("dc0261ce-322d-45a1-851d-e88863031c84"),
                            DTTermina = new DateTime(2024, 1, 30, 10, 40, 0, 0, DateTimeKind.Unspecified),
                            Obavljen = false,
                            PacijentID = new Guid("140fb21b-43c9-4da2-86e9-8f99d08d8d28"),
                            Placeno = true,
                            RezultatDodan = false,
                            ZakljucakDodan = false,
                            isDeleted = false
                        },
                        new
                        {
                            TerminID = new Guid("3c8f2e71-bb3c-456c-9914-cb98e7e165a9"),
                            DTTermina = new DateTime(2024, 1, 1, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicinskoOsobljeID = new Guid("09098d7d-1be0-4d0b-926d-9eb493d81dcc"),
                            Obavljen = false,
                            PacijentID = new Guid("140fb21b-43c9-4da2-86e9-8f99d08d8d28"),
                            Placeno = true,
                            RezultatDodan = true,
                            RezultatTerminaPDF = new byte[] { 37, 80, 68, 70, 45, 49, 46, 55, 10, 37, 226, 227, 207, 211, 10, 53, 32, 48, 32, 111, 98, 106, 10, 60, 60, 47, 70, 105, 108, 116, 101, 114, 47, 70, 108, 97, 116, 101, 68, 101, 99, 111, 100, 101, 47, 76, 101, 110, 103, 116, 104, 32, 52, 56, 48, 62, 62, 115, 116, 114, 101, 97, 109, 10, 120, 156, 141, 148, 203, 114, 219, 32, 20, 134, 247, 122, 138, 179, 76, 51, 83, 12, 136, 139, 212, 93, 155, 73, 186, 73, 122, 177, 245, 2, 36, 38, 46, 30, 73, 78, 44, 217, 157, 241, 211, 23, 36, 97, 148, 137, 3, 29, 105, 243, 207, 240, 113, 62, 224, 192, 107, 246, 173, 202, 22, 119, 4, 8, 131, 234, 57, 203, 5, 200, 66, 34, 74, 161, 90, 103, 87, 15, 122, 125, 175, 30, 127, 194, 82, 159, 14, 117, 175, 122, 3, 189, 222, 55, 166, 85, 128, 9, 178, 63, 197, 148, 33, 32, 252, 11, 198, 159, 170, 109, 118, 91, 101, 191, 179, 215, 243, 132, 116, 152, 176, 64, 28, 164, 32, 168, 224, 195, 148, 63, 212, 201, 28, 237, 52, 93, 175, 62, 66, 40, 161, 72, 200, 57, 228, 235, 127, 92, 68, 160, 34, 127, 75, 60, 235, 189, 110, 251, 86, 195, 113, 111, 182, 122, 221, 238, 186, 222, 196, 37, 243, 18, 229, 114, 160, 111, 150, 191, 82, 114, 97, 48, 161, 215, 41, 175, 48, 24, 195, 103, 224, 208, 108, 22, 247, 113, 23, 98, 193, 114, 32, 86, 122, 109, 26, 187, 18, 245, 100, 182, 201, 45, 11, 24, 79, 57, 133, 161, 206, 41, 199, 208, 52, 139, 63, 81, 41, 81, 50, 196, 166, 67, 236, 84, 221, 26, 120, 220, 155, 14, 78, 10, 30, 150, 171, 175, 9, 181, 25, 172, 55, 182, 147, 142, 237, 46, 97, 120, 129, 128, 54, 212, 186, 130, 184, 172, 36, 168, 28, 187, 248, 198, 244, 187, 122, 183, 177, 219, 7, 221, 203, 161, 63, 52, 169, 109, 156, 177, 255, 45, 123, 1, 113, 182, 141, 170, 205, 198, 54, 161, 109, 247, 214, 60, 233, 119, 226, 24, 220, 183, 252, 158, 97, 235, 252, 215, 94, 63, 68, 237, 233, 75, 137, 48, 133, 102, 138, 66, 48, 68, 8, 212, 217, 234, 18, 66, 9, 70, 140, 6, 102, 202, 113, 40, 47, 24, 226, 197, 172, 208, 152, 227, 16, 231, 5, 146, 51, 187, 41, 39, 42, 217, 7, 69, 10, 36, 229, 164, 230, 186, 116, 204, 145, 245, 16, 25, 32, 167, 230, 250, 53, 10, 185, 65, 121, 30, 32, 206, 203, 20, 97, 189, 56, 67, 180, 156, 121, 141, 57, 225, 229, 33, 239, 21, 133, 188, 151, 135, 6, 175, 56, 97, 189, 114, 251, 140, 145, 153, 215, 152, 19, 94, 30, 242, 94, 81, 200, 123, 121, 104, 240, 138, 19, 214, 11, 151, 14, 10, 94, 99, 78, 120, 121, 200, 123, 69, 33, 239, 229, 161, 193, 43, 78, 8, 16, 238, 10, 178, 224, 53, 229, 184, 215, 25, 154, 188, 226, 208, 228, 117, 134, 156, 215, 27, 226, 31, 8, 46, 148, 25, 10, 101, 110, 100, 115, 116, 114, 101, 97, 109, 10, 101, 110, 100, 111, 98, 106, 10, 52, 32, 48, 32, 111, 98, 106, 10, 60, 60, 47, 67, 111, 110, 116, 101, 110, 116, 115, 32, 53, 32, 48, 32, 82, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 53, 57, 53, 32, 56, 52, 50, 93, 47, 80, 97, 114, 101, 110, 116, 32, 50, 32, 48, 32, 82, 47, 82, 101, 115, 111, 117, 114, 99, 101, 115, 60, 60, 47, 70, 111, 110, 116, 60, 60, 47, 70, 49, 32, 54, 32, 48, 32, 82, 62, 62, 62, 62, 47, 84, 114, 105, 109, 66, 111, 120, 91, 48, 32, 48, 32, 53, 57, 53, 32, 56, 52, 50, 93, 47, 84, 121, 112, 101, 47, 80, 97, 103, 101, 62, 62, 10, 101, 110, 100, 111, 98, 106, 10, 51, 32, 48, 32, 111, 98, 106, 10, 60, 60, 47, 67, 114, 101, 97, 116, 105, 111, 110, 68, 97, 116, 101, 40, 68, 58, 50, 48, 50, 52, 48, 49, 48, 49, 49, 51, 51, 57, 48, 49, 43, 48, 49, 39, 48, 48, 39, 41, 47, 77, 111, 100, 68, 97, 116, 101, 40, 68, 58, 50, 48, 50, 52, 48, 49, 48, 49, 49, 51, 51, 57, 48, 49, 43, 48, 49, 39, 48, 48, 39, 41, 47, 80, 114, 111, 100, 117, 99, 101, 114, 40, 105, 84, 101, 120, 116, 174, 32, 67, 111, 114, 101, 32, 56, 46, 48, 46, 50, 32, 92, 40, 65, 71, 80, 76, 32, 118, 101, 114, 115, 105, 111, 110, 92, 41, 32, 169, 50, 48, 48, 48, 45, 50, 48, 50, 51, 32, 65, 112, 114, 121, 115, 101, 32, 71, 114, 111, 117, 112, 32, 78, 86, 41, 62, 62, 10, 101, 110, 100, 111, 98, 106, 10, 49, 32, 48, 32, 111, 98, 106, 10, 60, 60, 47, 80, 97, 103, 101, 115, 32, 50, 32, 48, 32, 82, 47, 84, 121, 112, 101, 47, 67, 97, 116, 97, 108, 111, 103, 62, 62, 10, 101, 110, 100, 111, 98, 106, 10, 54, 32, 48, 32, 111, 98, 106, 10, 60, 60, 47, 66, 97, 115, 101, 70, 111, 110, 116, 47, 72, 101, 108, 118, 101, 116, 105, 99, 97, 47, 69, 110, 99, 111, 100, 105, 110, 103, 47, 87, 105, 110, 65, 110, 115, 105, 69, 110, 99, 111, 100, 105, 110, 103, 47, 83, 117, 98, 116, 121, 112, 101, 47, 84, 121, 112, 101, 49, 47, 84, 121, 112, 101, 47, 70, 111, 110, 116, 62, 62, 10, 101, 110, 100, 111, 98, 106, 10, 50, 32, 48, 32, 111, 98, 106, 10, 60, 60, 47, 67, 111, 117, 110, 116, 32, 49, 47, 75, 105, 100, 115, 91, 52, 32, 48, 32, 82, 93, 47, 84, 121, 112, 101, 47, 80, 97, 103, 101, 115, 62, 62, 10, 101, 110, 100, 111, 98, 106, 10, 120, 114, 101, 102, 10, 48, 32, 55, 10, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 32, 54, 53, 53, 51, 53, 32, 102, 32, 10, 48, 48, 48, 48, 48, 48, 48, 56, 53, 56, 32, 48, 48, 48, 48, 48, 32, 110, 32, 10, 48, 48, 48, 48, 48, 48, 48, 57, 57, 49, 32, 48, 48, 48, 48, 48, 32, 110, 32, 10, 48, 48, 48, 48, 48, 48, 48, 54, 57, 53, 32, 48, 48, 48, 48, 48, 32, 110, 32, 10, 48, 48, 48, 48, 48, 48, 48, 53, 54, 50, 32, 48, 48, 48, 48, 48, 32, 110, 32, 10, 48, 48, 48, 48, 48, 48, 48, 48, 49, 53, 32, 48, 48, 48, 48, 48, 32, 110, 32, 10, 48, 48, 48, 48, 48, 48, 48, 57, 48, 51, 32, 48, 48, 48, 48, 48, 32, 110, 32, 10, 116, 114, 97, 105, 108, 101, 114, 10, 60, 60, 47, 73, 68, 32, 91, 60, 102, 102, 50, 49, 102, 50, 56, 50, 100, 50, 52, 52, 97, 102, 97, 100, 101, 99, 48, 97, 49, 51, 57, 100, 102, 100, 51, 48, 50, 102, 53, 99, 52, 101, 54, 57, 97, 54, 56, 100, 48, 56, 102, 55, 53, 54, 52, 48, 48, 101, 102, 100, 48, 101, 56, 49, 100, 100, 102, 52, 56, 53, 55, 49, 48, 49, 97, 48, 99, 101, 99, 102, 100, 52, 54, 98, 100, 99, 50, 101, 56, 97, 102, 99, 55, 52, 51, 101, 54, 54, 56, 100, 56, 50, 49, 55, 102, 100, 56, 56, 49, 53, 101, 52, 97, 57, 97, 99, 97, 49, 54, 51, 102, 52, 100, 55, 97, 50, 100, 49, 97, 98, 97, 97, 48, 101, 49, 49, 62, 60, 102, 102, 50, 49, 102, 50, 56, 50, 100, 50, 52, 52, 97, 102, 97, 100, 101, 99, 48, 97, 49, 51, 57, 100, 102, 100, 51, 48, 50, 102, 53, 99, 52, 101, 54, 57, 97, 54, 56, 100, 48, 56, 102, 55, 53, 54, 52, 48, 48, 101, 102, 100, 48, 101, 56, 49, 100, 100, 102, 52, 56, 53, 55, 49, 48, 49, 97, 48, 99, 101, 99, 102, 100, 52, 54, 98, 100, 99, 50, 101, 56, 97, 102, 99, 55, 52, 51, 101, 54, 54, 56, 100, 56, 50, 49, 55, 102, 100, 56, 56, 49, 53, 101, 52, 97, 57, 97, 99, 97, 49, 54, 51, 102, 52, 100, 55, 97, 50, 100, 49, 97, 98, 97, 97, 48, 101, 49, 49, 62, 93, 47, 73, 110, 102, 111, 32, 51, 32, 48, 32, 82, 47, 82, 111, 111, 116, 32, 49, 32, 48, 32, 82, 47, 83, 105, 122, 101, 32, 55, 62, 62, 10, 37, 105, 84, 101, 120, 116, 45, 67, 111, 114, 101, 45, 56, 46, 48, 46, 50, 10, 115, 116, 97, 114, 116, 120, 114, 101, 102, 10, 49, 48, 52, 50, 10, 37, 37, 69, 79, 70, 10 },
                            Status = true,
                            ZakljucakDodan = true,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("MedLabO.Services.Database.TerminTest", b =>
                {
                    b.Property<Guid?>("TestID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TerminID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RezultatID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TestID", "TerminID");

                    b.HasIndex("RezultatID");

                    b.HasIndex("TerminID");

                    b.ToTable("TerminTest");
                });

            modelBuilder.Entity("MedLabO.Services.Database.Test", b =>
                {
                    b.Property<Guid>("TestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdministratorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cijena")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DTKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<string>("NapomenaZaPripremu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid?>("TestParametarID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TipUzorka")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestID");

                    b.HasIndex("AdministratorID");

                    b.HasIndex("TestParametarID");

                    b.ToTable("Testovi");

                    b.HasData(
                        new
                        {
                            TestID = new Guid("d687ff9d-1ec4-4aa9-a4f3-2eb5149d2212"),
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            Cijena = 2m,
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(7759),
                            NapomenaZaPripremu = "Post od 8 sati prije testa.",
                            Naziv = "Glukoza",
                            Opis = "Mjerenje glukoze u krvi, važno za dijagnozu i praćenje dijabetesa.",
                            Slika = new byte[0],
                            TestParametarID = new Guid("46cba49e-0b4b-4018-ae70-5c9ceae529b5"),
                            TipUzorka = "Krv"
                        },
                        new
                        {
                            TestID = new Guid("8fff236b-4a25-4ed3-a138-f252ee4770eb"),
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            Cijena = 2.5m,
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(7807),
                            NapomenaZaPripremu = "Nema posebnih uputa.",
                            Naziv = "Leukociti",
                            Opis = "Broj leukocita, važan za otkrivanje infekcija ili upalnih procesa.",
                            Slika = new byte[0],
                            TestParametarID = new Guid("d70a4bfa-38c0-4d41-a090-208404e57209"),
                            TipUzorka = "Krv"
                        },
                        new
                        {
                            TestID = new Guid("54d120fc-224a-4710-9046-162d9b61c2d7"),
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            Cijena = 2.5m,
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(7841),
                            NapomenaZaPripremu = "Nema posebnih uputa.",
                            Naziv = "Eritrociti",
                            Opis = "Broj eritrocita, važan za dijagnozu anemije i drugih poremećaja.",
                            Slika = new byte[0],
                            TestParametarID = new Guid("bab9d588-8ff1-4355-96fd-f94d9bdb4a8d"),
                            TipUzorka = "Krv"
                        },
                        new
                        {
                            TestID = new Guid("ef16a7e3-3117-4246-ae58-fc54d2307c77"),
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            Cijena = 3m,
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(7874),
                            NapomenaZaPripremu = "Nema posebnih uputa.",
                            Naziv = "MCHC",
                            Opis = "Prosječna koncentracija hemoglobina u eritrocitu.",
                            Slika = new byte[0],
                            TestParametarID = new Guid("e8319b5a-0868-4fef-b356-32f9fdabbd82"),
                            TipUzorka = "Krv"
                        },
                        new
                        {
                            TestID = new Guid("ad25cc31-2b01-4ad3-bf2e-1fe4b53a3f25"),
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            Cijena = 3m,
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(7912),
                            NapomenaZaPripremu = "Nema posebnih uputa.",
                            Naziv = "AST",
                            Opis = "Enzim važan za otkrivanje oštećenja jetre.",
                            Slika = new byte[0],
                            TestParametarID = new Guid("901a4f75-3529-4b57-b9c0-8dd99f495d32"),
                            TipUzorka = "Krv"
                        },
                        new
                        {
                            TestID = new Guid("a4a12d1c-b174-4938-8557-cb6281ccb2a6"),
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            Cijena = 2m,
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(7954),
                            NapomenaZaPripremu = "Nema posebnih uputa.",
                            Naziv = "Sedimentacija",
                            Opis = "Brzina sedimentacije eritrocita, indikator upalnih procesa.",
                            Slika = new byte[0],
                            TestParametarID = new Guid("788e2d86-4fc5-49a8-994e-541180dba9bb"),
                            TipUzorka = "Krv"
                        },
                        new
                        {
                            TestID = new Guid("0c1a4613-be50-48a6-abcb-a535870fe369"),
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            Cijena = 3.5m,
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(7988),
                            NapomenaZaPripremu = "Nema posebnih uputa.",
                            Naziv = "CRP",
                            Opis = "Marker za upalu u tijelu.",
                            Slika = new byte[0],
                            TestParametarID = new Guid("0fe0697a-aa20-4e20-b152-58f6ed44efc3"),
                            TipUzorka = "Krv"
                        },
                        new
                        {
                            TestID = new Guid("14a35eb5-c4bd-4a0b-9990-c8b493367bcf"),
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            Cijena = 3m,
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(8022),
                            NapomenaZaPripremu = "Nema posebnih uputa.",
                            Naziv = "Bilirubin",
                            Opis = "Mjerenje bilirubina, važno za otkrivanje bolesti jetre i žučnih puteva.",
                            Slika = new byte[0],
                            TestParametarID = new Guid("77886ff8-caf5-4247-ae64-62e1a8c0969f"),
                            TipUzorka = "Krv"
                        },
                        new
                        {
                            TestID = new Guid("1c978bd5-9777-4c05-b2ae-de4d3b9b4fc5"),
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            Cijena = 2.5m,
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(8062),
                            NapomenaZaPripremu = "Post od 12 sati prije testa.",
                            Naziv = "Holesterol",
                            Opis = "Mjerenje ukupnog holesterola, važno za procjenu rizika od kardiovaskularnih bolesti.",
                            Slika = new byte[0],
                            TestParametarID = new Guid("e8e1e4b9-7fe9-4015-9f62-f3c844e831ce"),
                            TipUzorka = "Krv"
                        },
                        new
                        {
                            TestID = new Guid("20b1bda2-14bc-4b3f-bac4-598e2a292519"),
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            Cijena = 2.5m,
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(8110),
                            NapomenaZaPripremu = "Post od 12 sati prije testa.",
                            Naziv = "Trigliceridi",
                            Opis = "Mjerenje triglicerida, važno za procjenu rizika od srčanih bolesti.",
                            Slika = new byte[0],
                            TestParametarID = new Guid("e4f11b51-c4e6-473d-9221-c617354745f3"),
                            TipUzorka = "Krv"
                        },
                        new
                        {
                            TestID = new Guid("0c9db61b-d5e5-495d-876b-30ad80a8df3d"),
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            Cijena = 4.5m,
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(8146),
                            NapomenaZaPripremu = "Jutarnji sputum.",
                            Naziv = "Citologija sputuma",
                            Opis = "Analiza sputuma za otkrivanje abnormalnih stanica.",
                            Slika = new byte[0],
                            TestParametarID = new Guid("75b1dbb5-6b3c-4c76-8044-caff96608e08"),
                            TipUzorka = "Sputum"
                        },
                        new
                        {
                            TestID = new Guid("59a5aaae-ec61-476d-84f5-2621d4054160"),
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            Cijena = 5m,
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(8182),
                            NapomenaZaPripremu = "Nema posebnih uputa.",
                            Naziv = "Nasalni bris za MRSA",
                            Opis = "Testiranje na prisutnost MRSA (meticilin-rezistentni Staphylococcus aureus) u nosnoj šupljini.",
                            Slika = new byte[0],
                            TestParametarID = new Guid("84bfaf38-20b5-4648-b8f0-9d2c4cf7b95a"),
                            TipUzorka = "Nasalni bris"
                        },
                        new
                        {
                            TestID = new Guid("d9f7156c-a460-4a7c-b51c-ef7d859244af"),
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            Cijena = 3m,
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(8216),
                            NapomenaZaPripremu = "Jutarnji urin.",
                            Naziv = "Urinarni albumin",
                            Opis = "Mjerenje albumina u urinu, indikator oštećenja bubrega.",
                            Slika = new byte[0],
                            TestParametarID = new Guid("e16fecb2-a4cf-41fd-a264-18dbc8a25cc8"),
                            TipUzorka = "Urin"
                        });
                });

            modelBuilder.Entity("MedLabO.Services.Database.TestParametar", b =>
                {
                    b.Property<Guid>("TestParametarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Jedinica")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("MaxVrijednost")
                        .HasColumnType("real");

                    b.Property<float?>("MinVrijednost")
                        .HasColumnType("real");

                    b.Property<string>("NormalnaVrijednost")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestParametarID");

                    b.ToTable("TestParametri");

                    b.HasData(
                        new
                        {
                            TestParametarID = new Guid("46cba49e-0b4b-4018-ae70-5c9ceae529b5"),
                            Jedinica = "mmol/L",
                            MaxVrijednost = 5.8f,
                            MinVrijednost = 3.9f
                        },
                        new
                        {
                            TestParametarID = new Guid("d70a4bfa-38c0-4d41-a090-208404e57209"),
                            Jedinica = "x10^9/L",
                            MaxVrijednost = 11f,
                            MinVrijednost = 4f
                        },
                        new
                        {
                            TestParametarID = new Guid("bab9d588-8ff1-4355-96fd-f94d9bdb4a8d"),
                            Jedinica = "x10^12/L",
                            MaxVrijednost = 5.9f,
                            MinVrijednost = 3.8f
                        },
                        new
                        {
                            TestParametarID = new Guid("e8319b5a-0868-4fef-b356-32f9fdabbd82"),
                            Jedinica = "g/L",
                            MaxVrijednost = 355f,
                            MinVrijednost = 320f
                        },
                        new
                        {
                            TestParametarID = new Guid("901a4f75-3529-4b57-b9c0-8dd99f495d32"),
                            Jedinica = "U/L",
                            MaxVrijednost = 40f,
                            MinVrijednost = 0f
                        },
                        new
                        {
                            TestParametarID = new Guid("788e2d86-4fc5-49a8-994e-541180dba9bb"),
                            Jedinica = "mm/h",
                            MaxVrijednost = 30f,
                            MinVrijednost = 0f
                        },
                        new
                        {
                            TestParametarID = new Guid("0fe0697a-aa20-4e20-b152-58f6ed44efc3"),
                            Jedinica = "mg/L",
                            MaxVrijednost = 5f,
                            MinVrijednost = 0f
                        },
                        new
                        {
                            TestParametarID = new Guid("77886ff8-caf5-4247-ae64-62e1a8c0969f"),
                            Jedinica = "mg/dL",
                            MaxVrijednost = 20.5f,
                            MinVrijednost = 1.2f
                        },
                        new
                        {
                            TestParametarID = new Guid("e8e1e4b9-7fe9-4015-9f62-f3c844e831ce"),
                            Jedinica = "mmol/L",
                            MaxVrijednost = 7.8f,
                            MinVrijednost = 3.6f
                        },
                        new
                        {
                            TestParametarID = new Guid("e4f11b51-c4e6-473d-9221-c617354745f3"),
                            Jedinica = "mmol/L",
                            MaxVrijednost = 2.3f,
                            MinVrijednost = 0f
                        },
                        new
                        {
                            TestParametarID = new Guid("75b1dbb5-6b3c-4c76-8044-caff96608e08"),
                            NormalnaVrijednost = "Negativno na maligne stanice"
                        },
                        new
                        {
                            TestParametarID = new Guid("84bfaf38-20b5-4648-b8f0-9d2c4cf7b95a"),
                            NormalnaVrijednost = "Negativno na MRSA"
                        },
                        new
                        {
                            TestParametarID = new Guid("e16fecb2-a4cf-41fd-a264-18dbc8a25cc8"),
                            Jedinica = "mg/L",
                            MaxVrijednost = 30f,
                            MinVrijednost = 0f
                        });
                });

            modelBuilder.Entity("MedLabO.Services.Database.Usluga", b =>
                {
                    b.Property<int>("UslugaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UslugaID"), 1L, 1);

                    b.Property<Guid?>("AdministratorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cijena")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DTKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DTZadnjeModifikacije")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Dostupno")
                        .HasColumnType("bit");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("RezultatUH")
                        .HasColumnType("real");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("TrajanjeUMin")
                        .HasColumnType("int");

                    b.HasKey("UslugaID");

                    b.HasIndex("AdministratorID");

                    b.ToTable("Usluge");

                    b.HasData(
                        new
                        {
                            UslugaID = 1,
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            Cijena = 6m,
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(8238),
                            Dostupno = true,
                            Naziv = "Krvna slika",
                            Opis = "Mjerenje osnovnih testova vezanih za krvnu sliku.",
                            RezultatUH = 24f,
                            TrajanjeUMin = 10
                        },
                        new
                        {
                            UslugaID = 2,
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            Cijena = 8m,
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(8258),
                            Dostupno = true,
                            Naziv = "Jetreni panel",
                            Opis = "Kompletna analiza funkcije jetre.",
                            RezultatUH = 24f,
                            TrajanjeUMin = 15
                        },
                        new
                        {
                            UslugaID = 3,
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            Cijena = 4m,
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(8275),
                            Dostupno = true,
                            Naziv = "Kardiovaskularni rizik",
                            Opis = "Procjena rizika od kardiovaskularnih bolesti.",
                            RezultatUH = 24f,
                            TrajanjeUMin = 10
                        },
                        new
                        {
                            UslugaID = 4,
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            Cijena = 5m,
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(8292),
                            Dostupno = true,
                            Naziv = "Upalni marker",
                            Opis = "Testiranje za otkrivanje upalnih procesa u tijelu.",
                            RezultatUH = 24f,
                            TrajanjeUMin = 10
                        },
                        new
                        {
                            UslugaID = 5,
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            Cijena = 4m,
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(8313),
                            Dostupno = true,
                            Naziv = "Bubrežni panel",
                            Opis = "Procjena funkcije bubrega i rizika od dijabetesa.",
                            RezultatUH = 24f,
                            TrajanjeUMin = 15
                        },
                        new
                        {
                            UslugaID = 6,
                            AdministratorID = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            Cijena = 9m,
                            DTKreiranja = new DateTime(2024, 1, 1, 17, 10, 56, 197, DateTimeKind.Local).AddTicks(8332),
                            Dostupno = true,
                            Naziv = "Respiratorni panel",
                            Opis = "Analiza respiratornog sistema za otkrivanje infekcija.",
                            RezultatUH = 48f,
                            TrajanjeUMin = 20
                        });
                });

            modelBuilder.Entity("MedLabO.Services.Database.Zakljucak", b =>
                {
                    b.Property<Guid>("ZakljucakID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Detaljno")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("TerminID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ZakljucakID");

                    b.HasIndex("TerminID");

                    b.ToTable("Zakljucci");

                    b.HasData(
                        new
                        {
                            ZakljucakID = new Guid("cf32ff76-7659-4c4f-b73e-d9dbc841f409"),
                            Detaljno = "Povećan CRP ukazuje potencijalno postojeću upalu ili period poslije upale, te u tom slučaju bi se CRP u narednom periodu trebo vraćati u normalne okvire.",
                            Opis = "Povećan CRP"
                        });
                });

            modelBuilder.Entity("MedLabO.Services.Database.Zvanje", b =>
                {
                    b.Property<int>("ZvanjeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZvanjeID"), 1L, 1);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ZvanjeID");

                    b.ToTable("Zvanja");

                    b.HasData(
                        new
                        {
                            ZvanjeID = 1,
                            Naziv = "Ljekar",
                            Opis = "Ljekar u medicinskom laboratoriju specijaliziran je za analizu bioloških uzoraka, dijagnosticiranje bolesti i savjetovanje ostalih zdravstvenih radnika, koristeći naprednu laboratorijsku tehnologiju."
                        },
                        new
                        {
                            ZvanjeID = 2,
                            Naziv = "Laboratorijski tehničar",
                            Opis = "U medicinskom laboratoriju, laboratorijski tehničar precizno izvodi testiranja, održava laboratorijsku opremu i pomaže u interpretaciji rezultata testova."
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0507e219-2779-4096-8d17-a1a91055dfda"),
                            ConcurrencyStamp = "33bdaece-3b05-4c3d-9e28-6d25aadea48f",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("6d333ed3-85ff-4863-93cc-76701acb9e52"),
                            ConcurrencyStamp = "3a291db2-ba0f-48fa-bc42-724a7d05ae50",
                            Name = "MedicinskoOsoblje",
                            NormalizedName = "MEDICINSKOOSOBLJE"
                        },
                        new
                        {
                            Id = new Guid("c4f2036e-1b4c-4ac8-836c-f40f09a01a98"),
                            ConcurrencyStamp = "2d1c96f2-34c3-498d-a8f2-c04aab32944a",
                            Name = "Pacijent",
                            NormalizedName = "PACIJENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            RoleId = new Guid("0507e219-2779-4096-8d17-a1a91055dfda")
                        },
                        new
                        {
                            UserId = new Guid("09098d7d-1be0-4d0b-926d-9eb493d81dcc"),
                            RoleId = new Guid("6d333ed3-85ff-4863-93cc-76701acb9e52")
                        },
                        new
                        {
                            UserId = new Guid("140fb21b-43c9-4da2-86e9-8f99d08d8d28"),
                            RoleId = new Guid("c4f2036e-1b4c-4ac8-836c-f40f09a01a98")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TerminUsluga", b =>
                {
                    b.Property<int>("TerminUslugeUslugaID")
                        .HasColumnType("int");

                    b.Property<Guid>("UslugaTerminiTerminID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TerminUslugeUslugaID", "UslugaTerminiTerminID");

                    b.HasIndex("UslugaTerminiTerminID");

                    b.ToTable("TerminUsluga");
                });

            modelBuilder.Entity("TestUsluga", b =>
                {
                    b.Property<int>("TestUslugeUslugaID")
                        .HasColumnType("int");

                    b.Property<Guid>("UslugaTestoviTestID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TestUslugeUslugaID", "UslugaTestoviTestID");

                    b.HasIndex("UslugaTestoviTestID");

                    b.ToTable("TestUsluga");
                });

            modelBuilder.Entity("MedLabO.Services.Database.Administrator", b =>
                {
                    b.HasBaseType("MedLabO.Services.Database.ApplicationUser");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsKontakt")
                        .HasColumnType("bit");

                    b.Property<string>("KontaktInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Administrator");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e6bb3c49-9aa6-4ef0-9625-b16bb3775e58"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6fe96a41-e729-4b98-b77e-f3f12d4f5130",
                            Email = "administrator@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINISTRATOR@GMAIL.COM",
                            NormalizedUserName = "ADMINISTRATOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEGkOoR+cGiA+ARYPMO/o7JiECUfSxXPCV9IpSjTvFqt8hfAvvj0/2WXjmITiflzgRg==",
                            PhoneNumber = "0601234567",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "3b110b08-3940-425f-b7bf-cebda20a7605",
                            TwoFactorEnabled = false,
                            UserName = "administrator",
                            isDeleted = false,
                            Ime = "Administrator",
                            IsKontakt = true,
                            KontaktInfo = "administrator@gmail.com",
                            Prezime = "Administrator"
                        });
                });

            modelBuilder.Entity("MedLabO.Services.Database.MedicinskoOsoblje", b =>
                {
                    b.HasBaseType("MedLabO.Services.Database.ApplicationUser");

                    b.Property<DateTime?>("DTPrekidRadnogOdnosa")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DTZaposlenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MedicinskoOsoblje_Ime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MedicinskoOsoblje_Prezime");

                    b.Property<int?>("SpolID")
                        .HasColumnType("int");

                    b.Property<int?>("ZvanjeID")
                        .HasColumnType("int");

                    b.HasIndex("SpolID");

                    b.HasIndex("ZvanjeID");

                    b.HasDiscriminator().HasValue("MedicinskoOsoblje");

                    b.HasData(
                        new
                        {
                            Id = new Guid("09098d7d-1be0-4d0b-926d-9eb493d81dcc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53f6a720-c8cc-4f6c-a4a4-ef70b73c6bf5",
                            Email = "medicinskoOsoblje@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEDICINSKOOSOBLJE@GMAIL.COM",
                            NormalizedUserName = "MEDICINSKOOSOBLJE",
                            PasswordHash = "AQAAAAEAACcQAAAAEGkOoR+cGiA+ARYPMO/o7JiECUfSxXPCV9IpSjTvFqt8hfAvvj0/2WXjmITiflzgRg==",
                            PhoneNumber = "0607654321",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "2aa1af3c-765c-4dc4-ac2c-7216939e3f1e",
                            TwoFactorEnabled = false,
                            UserName = "medicinskoOsoblje",
                            isDeleted = false,
                            DTZaposlenja = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Ime = "MedicinskoOsoblje",
                            IsActive = true,
                            Prezime = "MedicinskoOsoblje",
                            SpolID = 2,
                            ZvanjeID = 1
                        });
                });

            modelBuilder.Entity("MedLabO.Services.Database.Pacijent", b =>
                {
                    b.HasBaseType("MedLabO.Services.Database.ApplicationUser");

                    b.Property<string>("Adresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Pacijent_Ime");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Pacijent_Prezime");

                    b.Property<int?>("SpolID")
                        .HasColumnType("int")
                        .HasColumnName("Pacijent_SpolID");

                    b.HasIndex("SpolID");

                    b.HasDiscriminator().HasValue("Pacijent");

                    b.HasData(
                        new
                        {
                            Id = new Guid("140fb21b-43c9-4da2-86e9-8f99d08d8d28"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee1c5d57-e06b-4b35-b200-c80ff2242cbd",
                            Email = "pacijent@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PACIJENT@GMAIL.COM",
                            NormalizedUserName = "PACIJENT",
                            PasswordHash = "AQAAAAEAACcQAAAAEGkOoR+cGiA+ARYPMO/o7JiECUfSxXPCV9IpSjTvFqt8hfAvvj0/2WXjmITiflzgRg==",
                            PhoneNumber = "0605555555",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "7568e1b2-a164-437b-8c85-a232269f08c3",
                            TwoFactorEnabled = false,
                            UserName = "pacijent",
                            isDeleted = false,
                            Adresa = "Ulica Prva 11",
                            DatumRodjenja = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Ime = "Pacijent",
                            Prezime = "Pacijent",
                            SpolID = 1
                        });
                });

            modelBuilder.Entity("MedLabO.Services.Database.Novost", b =>
                {
                    b.HasOne("MedLabO.Services.Database.Administrator", "Administrator")
                        .WithMany("KreiraneNovosti")
                        .HasForeignKey("AdministratorID");

                    b.Navigation("Administrator");
                });

            modelBuilder.Entity("MedLabO.Services.Database.Obavijest", b =>
                {
                    b.HasOne("MedLabO.Services.Database.Administrator", "Administrator")
                        .WithMany("KreiraneObavijesti")
                        .HasForeignKey("AdministratorID");

                    b.Navigation("Administrator");
                });

            modelBuilder.Entity("MedLabO.Services.Database.Racun", b =>
                {
                    b.HasOne("MedLabO.Services.Database.Termin", "Termin")
                        .WithMany()
                        .HasForeignKey("TerminID");

                    b.Navigation("Termin");
                });

            modelBuilder.Entity("MedLabO.Services.Database.Termin", b =>
                {
                    b.HasOne("MedLabO.Services.Database.MedicinskoOsoblje", "MedicinskoOsoblje")
                        .WithMany("OdobreniTermini")
                        .HasForeignKey("MedicinskoOsobljeID");

                    b.HasOne("MedLabO.Services.Database.Pacijent", "Pacijent")
                        .WithMany("Termini")
                        .HasForeignKey("PacijentID");

                    b.HasOne("MedLabO.Services.Database.Racun", "Racun")
                        .WithMany()
                        .HasForeignKey("RacunID");

                    b.HasOne("MedLabO.Services.Database.Zakljucak", "Zakljucak")
                        .WithMany()
                        .HasForeignKey("ZakljucakID");

                    b.Navigation("MedicinskoOsoblje");

                    b.Navigation("Pacijent");

                    b.Navigation("Racun");

                    b.Navigation("Zakljucak");
                });

            modelBuilder.Entity("MedLabO.Services.Database.TerminTest", b =>
                {
                    b.HasOne("MedLabO.Services.Database.Rezultat", "Rezultat")
                        .WithMany()
                        .HasForeignKey("RezultatID");

                    b.HasOne("MedLabO.Services.Database.Termin", "Termin")
                        .WithMany("TerminTestovi")
                        .HasForeignKey("TerminID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedLabO.Services.Database.Test", "Test")
                        .WithMany("TerminTestovi")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rezultat");

                    b.Navigation("Termin");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("MedLabO.Services.Database.Test", b =>
                {
                    b.HasOne("MedLabO.Services.Database.Administrator", "Administrator")
                        .WithMany("KreiraniTestovi")
                        .HasForeignKey("AdministratorID");

                    b.HasOne("MedLabO.Services.Database.TestParametar", "TestParametar")
                        .WithMany()
                        .HasForeignKey("TestParametarID");

                    b.Navigation("Administrator");

                    b.Navigation("TestParametar");
                });

            modelBuilder.Entity("MedLabO.Services.Database.Usluga", b =>
                {
                    b.HasOne("MedLabO.Services.Database.Administrator", null)
                        .WithMany("KreiraneUsluge")
                        .HasForeignKey("AdministratorID");
                });

            modelBuilder.Entity("MedLabO.Services.Database.Zakljucak", b =>
                {
                    b.HasOne("MedLabO.Services.Database.Termin", "Termin")
                        .WithMany()
                        .HasForeignKey("TerminID");

                    b.Navigation("Termin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MedLabO.Services.Database.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MedLabO.Services.Database.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedLabO.Services.Database.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MedLabO.Services.Database.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TerminUsluga", b =>
                {
                    b.HasOne("MedLabO.Services.Database.Usluga", null)
                        .WithMany()
                        .HasForeignKey("TerminUslugeUslugaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedLabO.Services.Database.Termin", null)
                        .WithMany()
                        .HasForeignKey("UslugaTerminiTerminID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestUsluga", b =>
                {
                    b.HasOne("MedLabO.Services.Database.Usluga", null)
                        .WithMany()
                        .HasForeignKey("TestUslugeUslugaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedLabO.Services.Database.Test", null)
                        .WithMany()
                        .HasForeignKey("UslugaTestoviTestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedLabO.Services.Database.MedicinskoOsoblje", b =>
                {
                    b.HasOne("MedLabO.Services.Database.Spol", "Spol")
                        .WithMany()
                        .HasForeignKey("SpolID");

                    b.HasOne("MedLabO.Services.Database.Zvanje", "Zvanje")
                        .WithMany("MedicinskoOsoblje")
                        .HasForeignKey("ZvanjeID");

                    b.Navigation("Spol");

                    b.Navigation("Zvanje");
                });

            modelBuilder.Entity("MedLabO.Services.Database.Pacijent", b =>
                {
                    b.HasOne("MedLabO.Services.Database.Spol", "Spol")
                        .WithMany()
                        .HasForeignKey("SpolID");

                    b.Navigation("Spol");
                });

            modelBuilder.Entity("MedLabO.Services.Database.Termin", b =>
                {
                    b.Navigation("TerminTestovi");
                });

            modelBuilder.Entity("MedLabO.Services.Database.Test", b =>
                {
                    b.Navigation("TerminTestovi");
                });

            modelBuilder.Entity("MedLabO.Services.Database.Zvanje", b =>
                {
                    b.Navigation("MedicinskoOsoblje");
                });

            modelBuilder.Entity("MedLabO.Services.Database.Administrator", b =>
                {
                    b.Navigation("KreiraneNovosti");

                    b.Navigation("KreiraneObavijesti");

                    b.Navigation("KreiraneUsluge");

                    b.Navigation("KreiraniTestovi");
                });

            modelBuilder.Entity("MedLabO.Services.Database.MedicinskoOsoblje", b =>
                {
                    b.Navigation("OdobreniTermini");
                });

            modelBuilder.Entity("MedLabO.Services.Database.Pacijent", b =>
                {
                    b.Navigation("Termini");
                });
#pragma warning restore 612, 618
        }
    }
}
